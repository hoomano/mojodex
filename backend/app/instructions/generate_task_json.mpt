#! gpt4-turbo/2023-03-15-preview

You are a json task expert writer.

DOCUMENTATION TO WRITE A JSON TASK:

create_new_task.json
---
# Create a new task

## Technical definition
A task is a JSON object that contains all necessary information to render it in the app and to guide the assistant through the process of drafting the document resulting from the task.
You can find a template of a task in the file `task_spec.json` in this repository.

Let's break this specification down with "meeting_minutes" task as an example.

#### Platforms
```
"platforms": ["mobile"]
```
Platforms on which the task is available. Can be "webapp", "mobile" or both.

### System information
```
"name_for_system": "prepare_meeting_minutes",
"definition_for_system": "The user needs assistance to prepare a meeting minutes"
```
These fields are used by the system to defined tasks in prompts. name_for_system should be snake_case.

### Final instruction
```
"final_instruction": "Write a meeting minutes in the form of bullet points"
```
This is the final instruction provided to the assistant prompt. It contains all instruction the assistant will follow to draft the document. It ends with an infinitive verb sentence as if it was an order to the assistant.

### Output format
```
"output_format_instruction_title": "SHORT CONTEXT - DATE OF THE DAY",
"output_format_instruction_draft": "CONTENT OF THE MEETING MINUTES"
```
These fields are used to define the format of the document resulting from the task. The assistant will use these instructions to format the document title and content.

### Output type
```
"output_type": "meeting_minutes"
```
This field is used to define the type of document resulting from the task. It is used to enable special edition features once the document is ready. The value should match one existing in table 'md_text_type' of your database, if it does not, will be created.
Existing md_text_type are {{existing_text_types}}. You can create a new one if none of these fits your needs.

### Icon
```
"icon": "üìù"
```
The icon displayed in the app to represent the task.

### Task displayed data
```
"task_displayed_data": [
    {
        "language_code": "en",
        "name_for_user": "Meeting Recap",
        "definition_for_user": "Get a simple summary and next steps for your meeting",
        "json_input": [
            {
                "input_name": "meeting_informations",
                "description_for_user": "How was your meeting?",
                "description_for_system": "Informations the user gave about the meeting (ex: participants, date, key topics, followup actions...)",
                "placeholder": "Record a quick summary of what was discussed.",
                "type": "text_area"
            }
        ]
    },
    {
        "language_code": "fr",
        "name_for_user": "R√©capitulatif de R√©union",
        "definition_for_user": "Obtenez un r√©capitulatif simple de votre r√©union",
        "json_input": [
            {
                "description_for_system": "Informations que l'utilisateur a fournies sur la r√©union (ex : participants, date, sujets cl√©s, actions de suivi...)",
                "description_for_user": "Comment s'est pass√©e votre r√©union ?",
                "input_name": "informations_reunion",
                "placeholder": "Enregistrez un bref r√©sum√© de ce qui a √©t√© discut√©.",
                "type": "text_area"
            }
        ]
    }
]
```
This field contains all data displayed to the user in the app. It is an array of objects, each object representing a language. You can add as many languages as you want but you have to define at least english as it will be used as a fallback if the user's language is not available.
The object contains the following fields:
- language_code: the language code of the language
- name_for_user: the name of the task in the language as it will be displayed to the user
- definition_for_user: the definition of the task in the language as it will be displayed to the user
- json_input: an array of objects, each object representing an information the user has to provide to the assistant when starting a new task.
    - On the web app, it will be displayed as a form, one input per object.
    - On the mobile app, it will be displayed in a chat as questions.
    Each object contains the following fields:
        - input_name: the name of the input as it will be used in the assistant prompt
        - description_for_user: the description of the input as it will be displayed to the user
        - description_for_system: the description of the input as it will be used in the assistant prompt
        - placeholder: the placeholder of the input as it will be displayed to the user
        - type: the type of the input. Can be only "text_area" for now.

> Note: For mobile use to remain interface friendly, we recommend to keep the number of inputs to 1. If the assistant needs to ask more than one question, it will do it in a conversational way.

### Infos to extract
```
"infos_to_extract": [
    {
        "info_name": "key_topics",
        "description": "Key topics discussed in the meeting"
    },
    {
        "info_name": "participants",
        "description": "Participants of the meeting"
    },
    {
        "info_name": "date_of_meeting",
        "description": "Date of the meeting"
    },
    {
        "info_name": "followup_actions",
        "description": "Followup actions if any"
    }
]
```
This field contains all the information the assistant needs to collect from the user before drafting the document. It is an array of objects, each object representing an information. Each object contains the following fields:
- info_name: the name of the information as it will be used in the assistant prompt
- description: the description of the information as it will be used in the assistant prompt
---

EXAMPLES OF TASKS JSON:

PREPARE_MEETING_MINUTES.json
---
{
    "platforms": [
        "mobile",
        "webapp"
    ],
    "predefined_actions": [],
    "task_displayed_data": [
        {
            "language_code": "en",
            "name_for_user": "Meeting Recap",
            "definition_for_user": "Prepare a detailed recap and next steps for your meeting",
            "json_input": [
                {
                    "input_name": "meeting_informations",
                    "description_for_user": "How was your meeting?",
                    "description_for_system": "Informations the user gave about the meeting (ex: participants, date, key topics, followup actions...)",
                    "placeholder": "Record a complete recap of what was discussed.",
                    "type": "text_area"
                }
            ]
        },
        {
            "language_code": "fr",
            "name_for_user": "R√©capitulatif de R√©union",
            "definition_for_user": "Pr√©parez un r√©capitulatif simple de votre r√©union",
            "json_input": [
                {
                    "description_for_system": "Informations que l'utilisateur a fournies sur la r√©union (ex : participants, date, sujets cl√©s, actions de suivi...)",
                    "description_for_user": "Comment s'est pass√©e votre r√©union ?",
                    "input_name": "informations_reunion",
                    "placeholder": "Enregistrez un bref r√©sum√© de ce qui a √©t√© discut√©.",
                    "type": "text_area"
                }
            ]
        }
    ],
    "name_for_system": "prepare_meeting_minutes",
    "definition_for_system": "The user needs assistance to prepare a meeting minutes",
    "final_instruction": "Write a well structured detailed meeting minutes including all the exhaustive informations provided by the user.",
    "output_format_instruction_title": "SHORT CONTEXT - DATE OF THE DAY",
    "output_format_instruction_draft": "CONTENT OF THE MEETING MINUTES",
    "output_type": "meeting_minutes",
    "icon": "üìù",
    "infos_to_extract": [
        {
            "info_name": "key_topics",
            "description": "Key topics discussed in the meeting"
        },
        {
            "info_name": "participants",
            "description": "Participants of the meeting"
        },
        {
            "info_name": "date_of_meeting",
            "description": "Date of the meeting"
        },
        {
            "info_name": "followup_actions",
            "description": "Followup actions if any"
        }
    ]
}
---

FOLLOW_UP_EMAIL.json
---
{
    "datetime": "2024-02-14T10:53:06.502Z",
    "platforms": [
        "mobile",
        "webapp"
    ],
    "predefined_actions": [],
    "task_displayed_data": [
        {
            "language_code": "en",
            "name_for_user": "Follow-up email",
            "definition_for_user": "Get a preliminary follow-up email for your meeting",
            "json_input": [
                {
                    "input_name": "meeting_informations",
                    "description_for_user": "How was your meeting?",
                    "description_for_system": "Informations the user gave about the meeting (ex: participants, date, key topics, followup actions...)",
                    "placeholder": "Record a quick summary of what was discussed.",
                    "type": "text_area"
                }
            ]
        },
        {
            "language_code": "fr",
            "name_for_user": "E-mail de suivi",
            "definition_for_user": "R√©digez un e-mail suite √† une r√©union",
            "json_input": [
                {
                    "description_for_system": "Informations que l'utilisateur a fournies sur la r√©union (ex : participants, date, sujets cl√©s, actions de suivi...)",
                    "description_for_user": "Comment s'est pass√©e votre r√©union ?",
                    "input_name": "informations_sur_la_reunion",
                    "placeholder": "Enregistrez un rapide r√©sum√© de ce qui a √©t√© discut√©.",
                    "type": "text_area"
                }
            ]
        }
    ],
    "name_for_system": "follow-up_email",
    "definition_for_system": "The user needs assistance to prepare a follow-up email",
    "final_instruction": "Write a follow-up email",
    "output_format_instruction_title": "EMAIL SUBJECT",
    "output_format_instruction_draft": "CONTENT OF THE EMAIL",
    "output_type": "email",
    "icon": "üíå",
    "infos_to_extract": [
        {
            "info_name": "meeting_notes",
            "description": "The notes taken by the user about the meeting"
        },
        {
            "info_name": "call_to_action",
            "description": "The follow-up that the user expects from the meeting and wants to share if any"
        }
    ]
}
---


Now, write the json body for a task with following requirements:
{{task_requirements}}
No talk, just well-formatted json.